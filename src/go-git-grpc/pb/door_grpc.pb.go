// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DoorClient is the client API for Door service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DoorClient interface {
	RunGit(ctx context.Context, opts ...grpc.CallOption) (Door_RunGitClient, error)
}

type doorClient struct {
	cc grpc.ClientConnInterface
}

func NewDoorClient(cc grpc.ClientConnInterface) DoorClient {
	return &doorClient{cc}
}

func (c *doorClient) RunGit(ctx context.Context, opts ...grpc.CallOption) (Door_RunGitClient, error) {
	stream, err := c.cc.NewStream(ctx, &Door_ServiceDesc.Streams[0], "/pb.Door/RunGit", opts...)
	if err != nil {
		return nil, err
	}
	x := &doorRunGitClient{stream}
	return x, nil
}

type Door_RunGitClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type doorRunGitClient struct {
	grpc.ClientStream
}

func (x *doorRunGitClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *doorRunGitClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DoorServer is the server API for Door service.
// All implementations must embed UnimplementedDoorServer
// for forward compatibility
type DoorServer interface {
	RunGit(Door_RunGitServer) error
	mustEmbedUnimplementedDoorServer()
}

// UnimplementedDoorServer must be embedded to have forward compatible implementations.
type UnimplementedDoorServer struct {
}

func (UnimplementedDoorServer) RunGit(Door_RunGitServer) error {
	return status.Errorf(codes.Unimplemented, "method RunGit not implemented")
}
func (UnimplementedDoorServer) mustEmbedUnimplementedDoorServer() {}

// UnsafeDoorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DoorServer will
// result in compilation errors.
type UnsafeDoorServer interface {
	mustEmbedUnimplementedDoorServer()
}

func RegisterDoorServer(s grpc.ServiceRegistrar, srv DoorServer) {
	s.RegisterService(&Door_ServiceDesc, srv)
}

func _Door_RunGit_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DoorServer).RunGit(&doorRunGitServer{stream})
}

type Door_RunGitServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type doorRunGitServer struct {
	grpc.ServerStream
}

func (x *doorRunGitServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *doorRunGitServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Door_ServiceDesc is the grpc.ServiceDesc for Door service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Door_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Door",
	HandlerType: (*DoorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunGit",
			Handler:       _Door_RunGit_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pb/door.proto",
}
